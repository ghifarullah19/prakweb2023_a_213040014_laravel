<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Cviebrock\EloquentSluggable\Sluggable;

class Post extends Model
{
    // Menggunakan trait HasFactory untuk membuat factory model Post dan menggunakan trait Sluggable untuk membuat slug otomatis ketika membuat post baru 
    use HasFactory, Sluggable;

    // Fillable digunakan untuk menentukan field mana saja yang boleh diisi
    protected $fillable = [
        'title', // Judul
        'category_id', // Kategori
        'user_id', // Penulis
        'slug',
        'excerpt',
        'body',
        'image'
    ];
    
    // Guarded digunakan untuk menentukan field mana saja yang tidak boleh diisi
    protected $quarded = ['id'];

    // With digunakan untuk memuat relasi yang telah dibuat
    protected $with = ['category', 'author'];

    // Membuat scope untuk filter
    public function scopeFilter($query, array $filters)
    {
        // query jika ada search yang dikirim dari form search
        $query->when($filters['search'] ?? false, function ($query, $search) {
            // kemudian query akan mencari data yang judulnya atau bodynya mengandung string yang dikirim dari form search
            return $query->where("title", "like", "%" . $search . "%")->orWhere("body", "like", "%" . $search . "%");
        });

        // query jika ada category yang dikirim dari form search
        $query->when($filters['category'] ?? false, function ($query, $category) {
            // kemudian query akan mencari data yang kategorinya mengandung string yang dikirim dari form search
            return $query->whereHas('category', function ($query) use ($category) {
                $query->where('slug', $category);
            });
        });

        // query jika ada author yang dikirim dari form search
        $query->when($filters['author'] ?? false, function ($query, $author) {
            // kemudian query akan mencari data yang penulisnya mengandung string yang dikirim dari form search
            return $query->whereHas('author', function ($query) use ($author) {
                $query->where('username', $author);
            });
        });
    }

    // Membuat relasi dengan model Category
    public function category()
    {
        // BelongsTo digunakan karena relasi antara Post dengan Category adalah one to many
        return $this->belongsTo(Category::class);
    }

    // Membuat relasi dengan model User
    public function author()
    {
        // BelongsTo digunakan karena relasi antara Post dengan User adalah one to many
        return $this->belongsTo(User::class, 'user_id');
    }

    // Merubah route key dari id ke slug
    public function getRouteKeyName()
    {
        // return parent::getRouteKeyName(); // TODO: Change the autogenerated stub
        return 'slug';
    }

    // Membuat slug dengan menggunakan library Sluggable dari Cviebrock Eloquent Sluggable
    public function sluggable(): array
    {
        // TODO: Implement sluggable() method.
        return [
            'slug' => [
                'source' => 'title'
            ]
        ];
    }
}
